based framework part:
    ✔ display a SDL window with "definitive" framework design                                      @done(21-02-24 19:37)
    ✔ vulkan renderer                                                                              @done(21-03-06 12:54)
    ☐ code refacto:
        ✔ during the refacto, remove all sub namespace to keep only lna namespace                  @done(21-03-07 02:13)
        ✔ during the refacto, remove all underscore prefix in functions parameters name            @done(21-03-07 03:05)
        ✔ add vec2 struct                                                                          @done(21-03-06 17:04)
        ✔ add vec4 struct                                                                          @done(21-03-06 17:04)
        ✔ add mat4 struct and functions:                                                           @done(21-03-06 21:59)
            ✔ identity                                                                             @done(21-03-06 18:50)
            ✔ lookat                                                                               @done(21-03-06 21:58)
            ✔ perspective                                                                          @done(21-03-06 21:59)
            ✔ rotation x                                                                           @done(21-03-06 18:50)
            ✔ rotation y                                                                           @done(21-03-06 18:50)
            ✔ rotation z                                                                           @done(21-03-06 18:50)
            ✔ scale                                                                                @done(21-03-06 18:52)
            ✔ translation                                                                          @done(21-03-06 18:52)
        ✔ move platform specific code in dedicated folders                                         @done(21-03-07 02:04)
            ✔ renderer_vulkan in platform/windows                                                  @done(21-03-06 22:13)
            ✔ window_sdl in platform/windows                                                       @done(21-03-07 02:04)
            ✔ input_sdl in platform/windows                                                        @done(21-03-07 02:04)
            ✔ timer_std in platform/windows                                                        @done(21-03-07 02:04)
        ✔ add C:\Work\Project\Game\lna\code\platform\windows\*.cpp in build_win64.bat              @done(21-03-07 02:04)
        ✔ check vulkan error result                                                                @done(21-03-07 10:02)
        ✔ add log system                                                                           @done(21-03-07 10:27)
        ✔ remove all std::cout use log system instead                                              @done(21-03-07 10:28)
        ✔ replace assert by custom assert macro                                                    @done(21-03-07 11:03)
        ✔ add memory pool system                                                                   @done(21-03-07 13:06)
            ✔ add frame time memory pool                                                           @done(21-03-07 13:10)
            ✔ add persistant memory pool                                                           @done(21-03-07 13:10)
        ✔ add allocated fixed size array struct based on memory pool system                        @done(21-03-07 17:50)
        ✔ remove std::optinal                                                                      @done(21-03-07 17:50)
        ✔ remove all std::vector                                                                   @done(21-03-08 22:08)
        ✔ remove all std::string                                                                   @done(21-03-08 22:08)
        ✔ remove all std::set                                                                      @done(21-03-08 22:08)
        ✔ fix swap chain clean and recreate problem with heap_array:                               @done(21-03-10 19:58)
            The problem is that we will recall heap_array_set_max_element_count each time we
            recreate the swap chain. So we must dedicated a specific memory pool for all
            array modified during the clean / recreate swap chain.
            In a general way, it could be a good idea to have memory pool dedicated to all
            vulkan stuff. Like this I will not have to pass the memory pool system. I will
            remove the memory_pool_system files
            ✔ add persistent memory pool for vulkan in renderer struct                             @done(21-03-10 19:49)
                will be use for allocated array with lifetime begins at renderer_init and ends
                at renderer_release
            ✔ add swap chain dedicated memory pool for vulkan in render struct                     @done(21-03-10 19:49)
                will be use for all allocated array that can destroy and re create during
                swap chain clean / recreate processes.
            ✔ add temp memory pool for vulkan in render struct                                     @done(21-03-10 19:49)
                will be use for shader file loading for example and all function local variables
            ✔ remove pool system from renderer_config                                              @done(21-03-10 19:49)
            ✔ allocate vulkan dedicated memory pool in init function                               @done(21-03-10 19:58)
            ✔ free vulkan dedicated memory pool in release function                                @done(21-03-10 19:58)
            ✔ use renderer._memory_pools instead of memory_pool_system                             @done(21-03-10 19:58)
            ✔ delete memory_pool_system.hpp/.cpp                                                   @done(21-03-10 19:49)
        ✔ fix memory pool system delete compile failed by using persistent memory pool in config   @done(21-03-10 19:39)
            ✔ remove pool system from window_config                                                @done(21-03-10 19:49)
            ✔ add persistent memory pool pointer member in window_config                           @done(21-03-10 19:58)
            ✔ create persistent memory pool in main.cpp                                            @done(21-03-10 19:58)
                ✔ create                                                                           @done(21-03-10 19:58)
                ✔ allocate                                                                         @done(21-03-10 19:58)
                ✔ set window_config parameter                                                      @done(21-03-10 19:58)
                ✔ free                                                                             @done(21-03-10 19:58)
            ✔ use memory pool instead of memory pool system in window_sdl.cpp                      @done(21-03-10 19:49)
                use by vulkan extensions array
        ☐ design push sprite
            we can begin with the following architecture =>
            a sprite =>
                a vertex buffer + device memory
                an index buffer + device memory
                a texture
            a texture
                a texture image + device memory
                a texture image view
                a texture sampler
            For the moment I will use push constant and rebuild the command buffer each frame.
            We will see later if we need optimizations.
            ✔ step 0 => move vkCmdBindDescriptorSets before vertex buffer and index buffer binding @done(21-03-12 18:07)
            ✔ step 0 => move command buffer set code in draw function (will be updated each frame) @done(21-03-12 18:08)
            ✔ step 1 => be able to draw the texture with the vulkan_mesh and vulkan_texture code:  @done(21-03-16 18:03)
                ✔ create vertex struct                                                             @done(21-03-14 12:42)
                ✔ create vulkan_mesh struct                                                        @done(21-03-14 12:43)
                ✔ add mesh create buffer function                                                  @done(21-03-14 12:41)
                ✔ texture struct                                                                   @done(21-03-14 12:49)
                    ✔ load texture from file function                                              @done(21-03-14 12:49)
                ✔ vulkan_texture struct                                                            @done(21-03-15 19:58)
                    ✔ struct                                                                       @done(21-03-15 16:44)
                    ✔ create texture function                                                      @done(21-03-15 19:58)
                    ✔ release texture function                                                     @done(21-03-15 19:58)
                    ✔ create vulkan_texture_config struct                                          @done(21-03-16 10:36)
                    ✔ rename vulkan_texture_create to vulkan_texture_configure                     @done(21-03-16 10:36)
                ✔ add uniform to vulkan_mesh:                                                      @done(21-03-16 14:23)
                    ✔ add uniform and uniform memory member                                        @done(21-03-16 10:45)
                    ✔ create uniform when create mesh                                              @done(21-03-16 10:45)
                    ✔ split code to be able to recreate uniform buffer after swap chain clean      @done(21-03-16 14:23)
                    ✔ add update uniform buffer function                                           @done(21-03-16 14:23)
                ✔ add descriptor sets to vulkan_mesh:                                              @done(21-03-16 14:23)
                    example here =>
                    https://github.com/SaschaWillems/Vulkan/blob/master/examples/descriptorsets/descriptorsets.cpp
                    ✔ add descriptor set member                                                    @done(21-03-16 10:45)
                    ✔ create descriptor set when create mesh                                       @done(21-03-16 13:04)
                    ✔ split code to be able to recreate descriptor set after swap chain clean      @done(21-03-16 14:23)
                ✔ validate changes                                                                 @done(21-03-16 18:03)
                    ✔ add temp vulkan_texture member to vulkan renderer                            @done(21-03-16 15:03)
                    ✔ add temp vulkan_mesh member to vulkan renderer                               @done(21-03-16 15:03)
                    ✔ call to vulkan_texture_configure                                             @done(21-03-16 18:02)
                    ✔ call to vulkan_mesh_configure                                                @done(21-03-16 18:02)
                    ✔ call to vulkan_texture_release                                               @done(21-03-16 18:02)
                    ✔ call to vulkan_mesh_release                                                  @done(21-03-16 18:02)
                    ✔ use vulkan_texture and vulkan_mesh when needed in vulkan renderer            @done(21-03-16 18:02)
                        for this just to check for compile error as we removed direct texture and vertex buffer in vulkan_renderer
            ✔ step 2 => be able to specify mesh position                                           @done(21-03-16 18:58)
                ✔ add MVP matrices to vulkan_mesh_update_uniform_buffer_info struct                @done(21-03-16 18:58)
                ✔ modify vulkan_mesh_upate_uniform_buffer to use the MVP matrices                  @done(21-03-16 18:58)
                ✔ add vec3 position for vk_mesh in vulkan_renderer (TEMP)                          @done(21-03-16 18:58)
                ✔ build MVP matrices                                                               @done(21-03-16 18:58)
                    before vulkan_mesh_upate_uniform_buffer call in renderer_draw_frame (TEMP)
                ✔ pass MVP built matrices to vulkan_mesh_update_uniform_buffer_info struct         @done(21-03-16 18:58)
                    in renderer_draw_frame
            ☐ step 3 => check for multiple meshes
                ☐ replace vulkan_renderer vk_mesh by array of vulkan_mesh
                ☐ replace vulkan_renderer mesh_position by array of vec3
                ☐ use loop to create vertex/index/uniform/descriptor
                ☐ use loop to clean uniform/descriptor
                ☐ use loop to release vertex/index/uniform/descriptor
                ☐ use loop to update render pass
            ☐ step 4 => manage vec3 as position:
                ☐ update vertex struct
                ☐ update vertex shader
                ☐ update vertex attribute description
                ☐ update VERTICES temp static variable
            ☐ step 5 => create wrapper function to create sprite quickly
            ☐ step 6 => clean:
                ☐ remove VERTICES and INDICES static variable in vulkan_renderer.cpp
                ☐ quick check for code consistency
                ☐ remove commented code in vulkan_renderer.hpp/.cpp
                ☐ remove container.hpp/.cpp => remove heap_array from my code
                ☐ passing code in full C ? (to discuss) => continue to use heap_array ?
        ☐ design push primitive
        ☐ design push debug text
    ☐ gamepad management:
        ☐ gamepad structure
        ☐ gamepad open
        ☐ gamepad update
        ☐ gamepad close
    ☐ imgui integration
