CONSTANT:
  ☐ one old file code review per weekend
    Add flag on file to show that the file has been reviewed and add the date.
    The goal is to review code and see that old code match last guidelines.
    it is possible review a file multiple time
  ☐ fix all TODO in code

PRIORITY:
  ✔ add ortho matrix creation function @done(21-06-27 11:25)

MUST DO:
  ☐ console system
  ☐ UI elements:
    ☐ button
    ☐ check box
    ☐ edit box
    ☐ list view
    ☐ tree view
    ☐ radio button
  ☐ real file system
    implement some sort of bigfile struct where to pick informations
  ☐ add shader binary code directly in each dedicated files instead of loading files
  ☐ centralize vulkan version to avoid multiple line change in build file after a vulkan update
  ☐ centralize sdl version to avoid multiple line change in build file after a sdl update

SHOULD DO:
  ☐ use vec3 parameters for mat4 look at create function instead of floats
  ☐ be able to manage mesh without texture (default texture or check with empty texture)
  ☐ regroup VkBuffer and VkDeviceMemory in one struct
    they are always used together in my code so it will limit function parameters count
    and help to realize the next task on config struct for vulkan function
  ☐ use config struct instead of long parameter list in vulkan helpers function

OPTIONAL:
  ☐ add stack allocator
  ☐ allow memory pool to use stack or heap allocator
  ☐ test cimgui integration in my code to use imgui in C => https://github.com/cimgui/cimgui

Archive:
  ✔ load obj function (dev only function)                                                                      @done(21-06-22 23:05) @project(OPTIONAL)
  ✔ remove lna_container.h                                                                                     @done(21-06-22 23:04) @project(PRIORITY)
    we will not use array and vector macros anymore, we will 
  ✔ remove all unneeded macro stuff                                                                            @done(21-06-22 23:04) @project(PRIORITY)
    macro must be used only if there is no another way to perform something.
    for example the reserve_memory macro must be removed, it is not necessary as we can
    use directly the memory pool function
  ✔ do not call VirtualAlloc and VirtualFree directly in allocator                                             @done(21-06-13 11:46) @project(MUST DO)
    like renderer, window, input, etc. I must use an interface and add implementation in a backends/windows folder
  ✔ free camera                                                                                                @done(21-06-11 15:16) @project(MUST DO)
  ✔ rename allocator to heap_allocator                                                                         @done(21-06-11 10:57) @project(MUST DO)
  ✔ mesh system                                                                                                @done(21-05-30 13:29) @project(MISC)
  ✔ move all graphics (ui, primitive, renderer, sprite, texture, mesh) stuff from backends to graphics folder  @done(21-05-25 14:55) @project(MISC)
  ✔ move all system (input, timer, window, gamepad) stuff from backends to system folder                       @done(21-05-25 14:55) @project(MISC)
  ✔ arrow primitive                                                                                            @done(21-05-09 10:56) @project(ROAD TO PROTOTYPING FRAMEWORK)
  ✔ circle primitive                                                                                           @done(21-05-09 10:56) @project(ROAD TO PROTOTYPING FRAMEWORK)
  ✔ rect primitive                                                                                             @done(21-05-09 10:56) @project(ROAD TO PROTOTYPING FRAMEWORK)
  ✔ cross primitive                                                                                            @done(21-05-09 10:56) @project(ROAD TO PROTOTYPING FRAMEWORK)
  ✔ raw primitive (vertices and indices in config)                                                             @done(21-05-09 10:56) @project(ROAD TO PROTOTYPING FRAMEWORK)
  ✔ sprite                                                                                                     @done(21-04-23 22:13) @project(ROAD TO PROTOTYPING FRAMEWORK)
  ✔ debug primitives                                                                                           @done(21-04-23 22:13) @project(ROAD TO PROTOTYPING FRAMEWORK)
  ✔ more modern C++ friendly code                                                                              @done(21-04-11 18:11) @project(MISC)
  ✔ debug fly camera                                                                                           @done(21-04-11 18:11) @project(MISC)
  ✔ rename vulkan_backend files to vulkan_renderer (only files)                                                @done(21-04-11 00:33) @project(MISC)
  ✔ primitive backend                                                                                          @done(21-04-05 19:34) @project(MISC)
  ✔ add basic shading for mesh backend                                                                         @done(21-04-08 00:20) @project(MISC)
  ✔ add more vertex to cuboid => x3                                                                            @done(21-04-07 22:11) @project(MISC)
    the reason is that each vertex is shared by 3 faces, so 3 different normals for
    one vertex. It will be usefull too, when we will manage correct texture mapping
  ✔ check for regression                                                                                       @done(21-04-07 22:11) @project(MISC)
  ✔ add normal to mesh vertex struct                                                                           @done(21-04-07 22:13) @project(MISC)
  ✔ add normal to mesh vertex vulkan description                                                               @done(21-04-07 22:19) @project(MISC)
  ✔ add normal to default vertex shader                                                                        @done(21-04-07 22:23) @project(MISC)
  ✔ check for regression                                                                                       @done(21-04-07 22:24) @project(MISC)
  ✔ add basic shading light structure                                                                          @done(21-04-08 00:19) @project(MISC)
  ✔ add light to default vertex shader                                                                         @done(21-04-08 00:19) @project(MISC)
  ✔ check for regression                                                                                       @done(21-04-08 00:19) @project(MISC)
  ✔ process light in fragment shader                                                                           @done(21-04-08 00:19) @project(MISC)
  ✔ validate                                                                                                   @done(21-04-08 00:19) @project(MISC)
  ✔ add depth buffering for 3D geometry                                                                        @done(21-04-04 02:45) @project(ROAD TO 3D GRAPHICS)
  ✔ display cuboid instead of flat sprite object                                                               @done(21-04-04 22:09) @project(ROAD TO 3D GRAPHICS)
  ✔ remove init function => prefer 0 initialization                                                            @done(21-04-03 18:52) @project(TODO)
  ✔ extract graphics pipeline creation from renderer_backend                                                   @done(21-04-03 18:59) @project(TODO)
    graphics pipeline is linked to graphics object type so it must be created outside
    renderer backend like we have done with ImGui wrapper.
  ✔ texture backend                                                                                            @done(21-03-28 14:41) @project(TODO)
  ✔ mesh backend                                                                                               @done(21-04-03 18:52) @project(TODO)
  ✔ modify create function to fully create the mesh (buffer + descriptor + uniform)                            @done(21-03-28 14:41) @project(TODO)
  ✔ add function on_swap_chain_cleanup                                                                         @done(21-03-28 18:40) @project(TODO)
  ✔ add function on_swap_chain_recreate                                                                        @done(21-03-28 18:40) @project(TODO)
  ✔ modify release function to not clean all vulkan stuff                                                      @done(21-03-28 18:40) @project(TODO)
    it will done by calling on_swap_chain_cleanup by renderer backend
  ✔ imgui backend                                                                                              @done(21-04-03 18:52) @project(TODO)
  ✔ register on_swapchain_cleanup callback in renderer backend                                                 @done(21-03-28 18:40) @project(TODO)
  ✔ register on_swapchain_recreate callback in renderer backend                                                @done(21-03-28 18:40) @project(TODO)
  ✔ update cleanup in renderer_backend                                                                         @done(21-04-03 18:52) @project(TODO)
    order =>
    1. release mesh backend
    2. release imgui backend
    3. release texture backend
    4. release renderer backend
  ✔ clean code                                                                                                 @done(21-04-03 18:59) @project(TODO)
    remove commented code
  ✔ LNA framework refacto                                                                                      @done(21-03-28 00:24) @project(TODO)
  ✔ manage all memory pool in a memory pool manager                                                            @done(21-03-27 22:00) @project(TODO)
    the goal is to centralize all memory pool in the same place.
    vulkan_renderer will use array of pointer on memory_pool and config
    will have memory_pool parameters.
  ✔ rename platform to backends                                                                                @done(21-03-27 22:28) @project(TODO)
  ✔ error return if gpu does not support Vulkan                                                                @started(21-03-27 23:22) @done(21-03-27 23:25) @lasted(3m42s) @project(TODO)
  ✔ remove view/projection matrices creation from draw frame                                                   @done(21-03-28 00:24) @project(TODO)
  ✔ display a SDL window with "definitive" framework design                                                    @done(21-02-24 19:37) @project(based framework)
  ✔ vulkan renderer                                                                                            @done(21-03-06 12:54) @project(based framework)
  ✔ code refacto:                                                                                              @done(21-03-18 16:51) @project(based framework)
  ✔ during the refacto, remove all sub namespace to keep only lna namespace                                    @done(21-03-07 02:13) @project(based framework)
  ✔ during the refacto, remove all underscore prefix in functions parameters name                              @done(21-03-07 03:05) @project(based framework)
  ✔ add vec2 struct                                                                                            @done(21-03-06 17:04) @project(based framework)
  ✔ add vec4 struct                                                                                            @done(21-03-06 17:04) @project(based framework)
  ✔ add mat4 struct and functions:                                                                             @done(21-03-06 21:59) @project(based framework)
  ✔ identity                                                                                                   @done(21-03-06 18:50) @project(based framework)
  ✔ lookat                                                                                                     @done(21-03-06 21:58) @project(based framework)
  ✔ perspective                                                                                                @done(21-03-06 21:59) @project(based framework)
  ✔ rotation x                                                                                                 @done(21-03-06 18:50) @project(based framework)
  ✔ rotation y                                                                                                 @done(21-03-06 18:50) @project(based framework)
  ✔ rotation z                                                                                                 @done(21-03-06 18:50) @project(based framework)
  ✔ scale                                                                                                      @done(21-03-06 18:52) @project(based framework)
  ✔ translation                                                                                                @done(21-03-06 18:52) @project(based framework)
  ✔ move platform specific code in dedicated folders                                                           @done(21-03-07 02:04) @project(based framework)
  ✔ renderer_vulkan in platform/windows                                                                        @done(21-03-06 22:13) @project(based framework)
  ✔ window_sdl in platform/windows                                                                             @done(21-03-07 02:04) @project(based framework)
  ✔ input_sdl in platform/windows                                                                              @done(21-03-07 02:04) @project(based framework)
  ✔ timer_std in platform/windows                                                                              @done(21-03-07 02:04) @project(based framework)
  ✔ add C:\Work\Project\Game\lna\code\platform\windows\*.cpp in build_win64.bat                                @done(21-03-07 02:04) @project(based framework)
  ✔ check vulkan error result                                                                                  @done(21-03-07 10:02) @project(based framework)
  ✔ add log system                                                                                             @done(21-03-07 10:27) @project(based framework)
  ✔ remove all std::cout use log system instead                                                                @done(21-03-07 10:28) @project(based framework)
  ✔ replace assert by custom assert macro                                                                      @done(21-03-07 11:03) @project(based framework)
  ✔ add memory pool system                                                                                     @done(21-03-07 13:06) @project(based framework)
  ✔ add frame time memory pool                                                                                 @done(21-03-07 13:10) @project(based framework)
  ✔ add persistant memory pool                                                                                 @done(21-03-07 13:10) @project(based framework)
  ✔ add allocated fixed size array struct based on memory pool system                                          @done(21-03-07 17:50) @project(based framework)
  ✔ remove std::optinal                                                                                        @done(21-03-07 17:50) @project(based framework)
  ✔ remove all std::vector                                                                                     @done(21-03-08 22:08) @project(based framework)
  ✔ remove all std::string                                                                                     @done(21-03-08 22:08) @project(based framework)
  ✔ remove all std::set                                                                                        @done(21-03-08 22:08) @project(based framework)
  ✔ fix swap chain clean and recreate problem with heap_array:                                                 @done(21-03-10 19:58) @project(based framework)
    The problem is that we will recall heap_array_set_max_element_count each time we
    recreate the swap chain. So we must dedicated a specific memory pool for all
    array modified during the clean / recreate swap chain.
    In a general way, it could be a good idea to have memory pool dedicated to all
    vulkan stuff. Like this I will not have to pass the memory pool system. I will
    remove the memory_pool_system files
  ✔ add persistent memory pool for vulkan in renderer struct                                                   @done(21-03-10 19:49) @project(based framework)
    will be use for allocated array with lifetime begins at renderer_init and ends
    at renderer_release
  ✔ add swap chain dedicated memory pool for vulkan in render struct                                           @done(21-03-10 19:49) @project(based framework)
    will be use for all allocated array that can destroy and re create during
    swap chain clean / recreate processes.
  ✔ add temp memory pool for vulkan in render struct                                                           @done(21-03-10 19:49) @project(based framework)
    will be use for shader file loading for example and all function local variables
  ✔ remove pool system from renderer_config                                                                    @done(21-03-10 19:49) @project(based framework)
  ✔ allocate vulkan dedicated memory pool in init function                                                     @done(21-03-10 19:58) @project(based framework)
  ✔ free vulkan dedicated memory pool in release function                                                      @done(21-03-10 19:58) @project(based framework)
  ✔ use renderer._memory_pools instead of memory_pool_system                                                   @done(21-03-10 19:58) @project(based framework)
  ✔ delete memory_pool_system.hpp/.cpp                                                                         @done(21-03-10 19:49) @project(based framework)
  ✔ fix memory pool system delete compile failed by using persistent memory pool in config                     @done(21-03-10 19:39) @project(based framework)
  ✔ remove pool system from window_config                                                                      @done(21-03-10 19:49) @project(based framework)
  ✔ add persistent memory pool pointer member in window_config                                                 @done(21-03-10 19:58) @project(based framework)
  ✔ create persistent memory pool in main.cpp                                                                  @done(21-03-10 19:58) @project(based framework)
  ✔ create                                                                                                     @done(21-03-10 19:58) @project(based framework)
  ✔ allocate                                                                                                   @done(21-03-10 19:58) @project(based framework)
  ✔ set window_config parameter                                                                                @done(21-03-10 19:58) @project(based framework)
  ✔ free                                                                                                       @done(21-03-10 19:58) @project(based framework)
  ✔ use memory pool instead of memory pool system in window_sdl.cpp                                            @done(21-03-10 19:49) @project(based framework)
    use by vulkan extensions array
  ✔ mesh system                                                                                                @done(21-03-18 16:50) @project(based framework)
    we can begin with the following architecture =>
    a sprite =>
    a vertex buffer + device memory
    an index buffer + device memory
    a texture
    a texture
    a texture image + device memory
    a texture image view
    a texture sampler
    For the moment I will use push constant and rebuild the command buffer each frame.
    We will see later if we need optimizations.
  ✔ step 0 => move vkCmdBindDescriptorSets before vertex buffer and index buffer binding                       @done(21-03-12 18:07) @project(based framework)
  ✔ step 0 => move command buffer set code in draw function (will be updated each frame)                       @done(21-03-12 18:08) @project(based framework)
  ✔ step 1 => be able to draw the texture with the vulkan_mesh and vulkan_texture code:                        @done(21-03-16 18:03) @project(based framework)
  ✔ create vertex struct                                                                                       @done(21-03-14 12:42) @project(based framework)
  ✔ create vulkan_mesh struct                                                                                  @done(21-03-14 12:43) @project(based framework)
  ✔ add mesh create buffer function                                                                            @done(21-03-14 12:41) @project(based framework)
  ✔ texture struct                                                                                             @done(21-03-14 12:49) @project(based framework)
  ✔ load texture from file function                                                                            @done(21-03-14 12:49) @project(based framework)
  ✔ vulkan_texture struct                                                                                      @done(21-03-15 19:58) @project(based framework)
  ✔ struct                                                                                                     @done(21-03-15 16:44) @project(based framework)
  ✔ create texture function                                                                                    @done(21-03-15 19:58) @project(based framework)
  ✔ release texture function                                                                                   @done(21-03-15 19:58) @project(based framework)
  ✔ create vulkan_texture_config struct                                                                        @done(21-03-16 10:36) @project(based framework)
  ✔ rename vulkan_texture_create to vulkan_texture_configure                                                   @done(21-03-16 10:36) @project(based framework)
  ✔ add uniform to vulkan_mesh:                                                                                @done(21-03-16 14:23) @project(based framework)
  ✔ add uniform and uniform memory member                                                                      @done(21-03-16 10:45) @project(based framework)
  ✔ create uniform when create mesh                                                                            @done(21-03-16 10:45) @project(based framework)
  ✔ split code to be able to recreate uniform buffer after swap chain clean                                    @done(21-03-16 14:23) @project(based framework)
  ✔ add update uniform buffer function                                                                         @done(21-03-16 14:23) @project(based framework)
  ✔ add descriptor sets to vulkan_mesh:                                                                        @done(21-03-16 14:23) @project(based framework)
    example here =>
    https://github.com/SaschaWillems/Vulkan/blob/master/examples/descriptorsets/descriptorsets.cpp
  ✔ add descriptor set member                                                                                  @done(21-03-16 10:45) @project(based framework)
  ✔ create descriptor set when create mesh                                                                     @done(21-03-16 13:04) @project(based framework)
  ✔ split code to be able to recreate descriptor set after swap chain clean                                    @done(21-03-16 14:23) @project(based framework)
  ✔ validate changes                                                                                           @done(21-03-16 18:03) @project(based framework)
  ✔ add temp vulkan_texture member to vulkan renderer                                                          @done(21-03-16 15:03) @project(based framework)
  ✔ add temp vulkan_mesh member to vulkan renderer                                                             @done(21-03-16 15:03) @project(based framework)
  ✔ call to vulkan_texture_configure                                                                           @done(21-03-16 18:02) @project(based framework)
  ✔ call to vulkan_mesh_configure                                                                              @done(21-03-16 18:02) @project(based framework)
  ✔ call to vulkan_texture_release                                                                             @done(21-03-16 18:02) @project(based framework)
  ✔ call to vulkan_mesh_release                                                                                @done(21-03-16 18:02) @project(based framework)
  ✔ use vulkan_texture and vulkan_mesh when needed in vulkan renderer                                          @done(21-03-16 18:02) @project(based framework)
    for this just to check for compile error as we removed direct texture and vertex buffer in vulkan_renderer
  ✔ step 2 => be able to specify mesh position                                                                 @done(21-03-16 18:58) @project(based framework)
  ✔ add MVP matrices to vulkan_mesh_update_uniform_buffer_info struct                                          @done(21-03-16 18:58) @project(based framework)
  ✔ modify vulkan_mesh_upate_uniform_buffer to use the MVP matrices                                            @done(21-03-16 18:58) @project(based framework)
  ✔ add vec3 position for vk_mesh in vulkan_renderer (TEMP)                                                    @done(21-03-16 18:58) @project(based framework)
  ✔ build MVP matrices                                                                                         @done(21-03-16 18:58) @project(based framework)
    before vulkan_mesh_upate_uniform_buffer call in renderer_draw_frame (TEMP)
  ✔ pass MVP built matrices to vulkan_mesh_update_uniform_buffer_info struct                                   @done(21-03-16 18:58) @project(based framework)
    in renderer_draw_frame
  ✔ step 3 => check for multiple meshes                                                                        @done(21-03-16 23:13) @project(based framework)
  ✔ create vulkan_graphics_object struct                                                                       @done(21-03-16 22:19) @project(based framework)
  ✔ vulkan_mesh                                                                                                @done(21-03-16 22:19) @project(based framework)
  ✔ vec3 position                                                                                              @done(21-03-16 22:19) @project(based framework)
  ✔ replace vk_mesh and vk_mesh_position by array of vulkan_graphics_object                                    @done(21-03-16 22:22) @project(based framework)
  ✔ use loop to create vertex/index/uniform/descriptor                                                         @done(21-03-16 22:47) @project(based framework)
  ✔ use loop to clean uniform/descriptor                                                                       @done(21-03-16 22:47) @project(based framework)
  ✔ use loop to release vertex/index/uniform/descriptor                                                        @done(21-03-16 22:47) @project(based framework)
  ✔ use loop to update render pass                                                                             @done(21-03-16 22:47) @project(based framework)
  ✔ step 4 => manage vec3 as position:                                                                         @done(21-03-16 22:53) @project(based framework)
  ✔ update vertex struct                                                                                       @done(21-03-16 22:49) @project(based framework)
  ✔ update vertex shader                                                                                       @done(21-03-16 22:50) @project(based framework)
  ✔ update vertex attribute description                                                                        @done(21-03-16 22:51) @project(based framework)
  ✔ update VERTICES temp static variable                                                                       @done(21-03-16 22:52) @project(based framework)
  ✔ check if I broke something...                                                                              @done(21-03-16 22:53) @project(based framework)
  ✔ step 5 => clean code                                                                                       @done(21-03-17 21:37) @project(based framework)
  ✔ remove container.hpp/.cpp => remove heap_array from my code                                                @done(21-03-17 20:41) @project(based framework)
  ✔ remove template in platform code => use forward declaration to replace template                            @done(21-03-17 21:37) @project(based framework)
  ✔ step 6 => create wrapper function to create mesh quickly                                                   @done(21-03-18 11:44) @project(based framework)
    @critical SEE IF I WANT TO HAVE MESH OR SPRITE IN RENDERER
    DOES THE RENDERER MUST KNOW SPRITE SPECIFICITY OR MANAGE ALL MESH THE SAME WAY?
    I MUST THINK ABOUT IT AND UPDATE THE TODO FOLLOWING MY INVESTIGATION!
    => It will be mesh. The renderer will be agnostic of graphics object type to avoid to much overload
  ✔ uint32_t typedef renderer_texture_handle                                                                   @done(21-03-18 09:46) @project(based framework)
  ✔ vulkan_texture array in vulkan_renderer                                                                    @done(21-03-18 09:46) @project(based framework)
  ✔ function renderer_push_texture                                                                             @done(21-03-18 09:46) @project(based framework)
    parameters => renderer, renderer_texture_config
    return => renderer_texture_handle
  ✔ renderer_mesh_config struct                                                                                @done(21-03-18 10:13) @project(based framework)
  ✔ uint32_t typedef renderer_mesh_handle                                                                      @done(21-03-18 10:13) @project(based framework)
  ✔ function renderer_push_mesh                                                                                @done(21-03-18 10:13) @project(based framework)
    parameters => renderer, renderer_mesh_config
    return => renderer_mesh_handle
    this function will use our current vulkan_graphics_object array for the moment
    and DEFAULT_RECT_VERTICES / DEFAULT_RECT_INDICES to create vulkan mesh
  ✔ remove vk_texture member from vulkan_renderer                                                              @done(21-03-18 10:13) @project(based framework)
  ✔ remove static vulkan_graphics_object creation in vulkan_renderer                                           @done(21-03-18 10:13) @project(based framework)
  ✔ rename VERTICES and INDICES to DEFAULT_RECT_VERTICES and DEFAULT_RECT_INDICES                              @done(21-03-18 10:13) @project(based framework)
  ✔ check!                                                                                                     @done(21-03-18 10:13) @project(based framework)
  ✔ step 7 => clean:                                                                                           @done(21-03-18 11:44) @project(based framework)
  ✔ check for code consistency                                                                                 @done(21-03-18 11:44) @project(based framework)
    parameter order
    naming convention
    etc
  ✔ remove commented code in vulkan_renderer.hpp/.cpp                                                          @done(21-03-18 10:41) @project(based framework)
  ✔ check for include problem                                                                                  @done(21-03-18 10:57) @project(based framework)
    remove unecessary include
    use forward declaration when possible
  ✔ move default shaders from lna_framework_text to lna                                                        @done(21-03-18 11:20) @project(based framework)
  ✔ check for regression!                                                                                      @done(21-03-18 11:20) @project(based framework)
  ✔ gamepad management:                                                                                        @done(21-03-18 16:50) @project(based framework)
  ✔ gamepad structure                                                                                          @done(21-03-18 16:50) @project(based framework)
  ✔ gamepad open                                                                                               @done(21-03-18 16:50) @project(based framework)
  ✔ gamepad update                                                                                             @done(21-03-18 16:50) @project(based framework)
  ✔ gamepad close                                                                                              @done(21-03-18 16:50) @project(based framework)
  ✔ imgui integration                                                                                          @done(21-03-20 21:56) @project(based framework)
  ✔ imgui vulkan implementation                                                                                @done(21-03-20 21:56) @project(based framework)
  ✔ imgui configure function                                                                                   @done(21-03-20 11:19) @project(based framework)
  ✔ imgui release function                                                                                     @done(21-03-20 11:19) @project(based framework)
  ✔ imgui update buffers function:                                                                             @done(21-03-20 21:49) @project(based framework)
  ✔ rename vulkan_tools_gui struct to vulkan_imgui_wrapper                                                     @done(21-03-20 12:03) @project(based framework)
  ✔ change function prefix to vulkan_imgui_wrapper                                                             @done(21-03-20 12:03) @project(based framework)
  ✔ change function parameter to imgui_wrapper                                                                 @done(21-03-20 12:03) @project(based framework)
  ✔ create/update vulkan buffers in imgui update buffers function                                              @done(21-03-20 16:21) @project(based framework)
    we will use raw code and not try to use refactored code or object
    => no vulkan_buffer struct for the moment, just raw code in vulkan_imgui_wrapper_update
  ✔ imgui draw frame function                                                                                  @done(21-03-20 21:49) @project(based framework)
  ✔ validate!                                                                                                  @done(21-03-20 21:49) @project(based framework)
  ✔ clean code                                                                                                 @done(21-03-20 21:55) @project(based framework)
  ✔ remove comment                                                                                             @done(21-03-20 21:55) @project(based framework)
  ✔ move non public from .hpp to .cpp                                                                          @done(21-03-20 21:55) @project(based framework)
  ✔ validate non regression                                                                                    @done(21-03-20 21:55) @project(based framework)
